'use strict';

/*
  Author: Pontus Ã–stlund <https://profiles.google.com/poppanator>
*/

// jshint esversion: 6, undef: true, unused: true
/* global window, document, setTimeout, clearTimeout */

(function (window, document, navigator) {
  'use strict';

  // Storage for all created carousels.

  var carousels = [];

  // Storage for match media sizes.
  var mediaQueries = {};

  // When we get a media match we don't act upon in immediately but only
  // execute on the last one. This is the interval ids for matches and no
  // matches. The latter is needed if no media is matched, in which case we
  // need to set the default media.
  var mmcival = void 0,
      nomatchival = void 0;
  var onMatchMediaChange = function onMatchMediaChange(e) {
    werror('media changed: ', e.media);
    if (e.matches) {
      // werror('>>> Media change: ', e.media);
      h.each(carousels, function (c) {
        if (c.hasMediaQueries()) {
          if (mmcival) {
            clearTimeout(mmcival);
          }

          if (nomatchival) {
            clearTimeout(nomatchival);
          }

          mmcival = setTimeout(function () {
            // werror('Check media in c: ', c.hasMediaQueries(), e.media);
            c.changeMedia(e.media);
          }, 10);
        }
      });
    } else {
      if (nomatchival) {
        clearTimeout(nomatchival);
      }
      nomatchival = setTimeout(function () {
        h.each(carousels, function (c) {
          if (c.hasMediaQueries()) {
            c.changeMedia();
          }
        });
      }, 10);
    }
  };

  var werror = window.console.log;

  var isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;

  // werror('Is touch: ', isTouch);

  // Helper methods
  var h = function () {
    var _this = this;

    return {
      getByClass: function getByClass(el, cls, one) {
        var e = el.getElementsByClassName(cls);

        if (one && e.length) {
          return e[0];
        }

        return e.length && e || undefined;
      },

      getByTag: function getByTag(el, tag, one) {
        var e = el.getElementsByTagName(tag);

        if (one) {
          if (e && e.length) {
            return e[0];
          }
        }

        return e;
      },

      mkel: function mkel(tag, attr) {
        var e = document.createElement(tag);

        if (attr) {
          var keys = Object.keys(attr);
          for (var i = 0; i < keys.length; i++) {
            e.setAttribute(keys[i], attr[keys[i]]);
          }
        }

        return e;
      },

      each: function each(what, cb) {
        var cbres = void 0;
        for (var i = 0; i < what.length; i++) {
          cbres = cb.call(_this, what[i]);
          if (cbres === false) {
            break;
          }
        }
      },

      addMediaQuery: function addMediaQuery(mq) {
        if (!mediaQueries[mq]) {
          mediaQueries[mq] = true;
          window.matchMedia(mq).addListener(onMatchMediaChange);
        }
      }
    };
  }();

  if (isTouch) {
    h.getByTag(document, 'html', true).classList.add('carousel-istouch');
  }

  var Carousel = function Carousel(el) {
    var _this2 = this;

    this.config = {
      delay: 8000,
      transition: 'slide'
    };

    carousels.push(this);

    this.element = el;
    this.useIndicators = el.dataset.carouselIndicators !== undefined;
    this.indicators = [];
    this.slider = h.getByClass(el, 'carousel-slider', true);
    this.items = [];
    this.ivalId = null;
    this.currPos = 0;

    this._hasmedia = -1;

    var items = h.getByClass(this.slider, 'carousel-item');

    h.each(items, function (el) {
      _this2.items.push(new Carousel.Item(el));
    });

    if (el.dataset.carouselDelay) {
      this.config.delay = parseInt(el.dataset.carouselDelay, 10);
    }

    if (el.dataset.carouselTransition) {
      this.config.transition = el.dataset.carouselTransition;
    }

    if (this.items.length) {
      this.items[0].load();
    }

    if (this.items.length > 1) {
      this.items[1].load();
      this._makeIndicators();
    }

    this.play();
  };

  Carousel.prototype.play = function () {
    if (this.ivalId) {
      clearTimeout(this.ivalId);
    }

    var my = this;

    this.ivalId = setTimeout(function () {
      my.next();
      my.play();
    }, this.config.delay);
  };

  Carousel.prototype.next = function () {
    this.currPos += 1;

    if (this.currPos >= this.items.length) {
      this.currPos = 0;
    } else {
      this._loadIfNecessary(this.currPos + 1);
    }

    this.goto(this.currPos);
  };

  Carousel.prototype.goto = function (pos) {
    if (pos < 0 || pos >= this.items.length) {
      return;
    }

    clearTimeout(this.ivalId);

    this._loadIfNecessary(pos);
    this.setIndicator(pos);
    this.slider.dataset.carouselPos = pos;
    this.currPos = pos;
    this.play();
  };

  Carousel.prototype.hasMediaQueries = function () {
    var _this3 = this;

    if (this._hasmedia !== -1) {
      return !!this._hasmedia;
    }

    h.each(this.items, function (item) {
      if (item.hasMediaQueries) {
        _this3._hasmedia = 1;
        return false;
      }
    });

    if (this._hasmedia === -1) {
      this._hasmedia = 0;
    }

    return !!this._hasmedia;
  };

  Carousel.prototype.changeMedia = function (size) {
    h.each(this.items, function (item) {
      if (item.hasMediaQueries) {
        item.changeMedia(size);
      }
    });
  };

  Carousel.prototype._loadIfNecessary = function (pos) {
    if (pos >= 0 && pos < this.items.length) {
      if (!this.items[pos].isLoaded) {
        this.items[pos].load();
      }
    }
  };

  Carousel.prototype._makeIndicators = function () {
    var _this4 = this;

    if (!this.useIndicators || this.items.length < 2) {
      return;
    }

    var ind = h.getByClass(this.element, 'carousel-indicators', true);
    var inds = [];

    if (!ind) {
      ind = h.mkel('div', { class: 'carousel-indicators' });
    }

    this.items.forEach(function () {
      var i = new Carousel.Indicator(_this4, inds.length);
      ind.appendChild(i.btn);
      inds.push(i);
    });

    inds[0].activate();

    this.element.appendChild(ind);
    this.indicators = inds;
  };

  Carousel.prototype.setIndicator = function (index) {
    if (!this.useIndicators || this.items.length < 2) {
      return;
    }

    if (index === undefined) {
      index = this.currPos;
    }

    this.currPos = index;

    this.indicators.forEach(function (ind) {
      ind.deActivate();
    });

    this.indicators[index].activate();
  };

  Carousel.Item = function (el) {
    this.mediaQueries = {};
    this.hasMediaQueries = false;
    this.img = h.getByTag(el, 'img', true);
    this.element = el;
    this.isLoaded = false;
    this.src = null;
    this.defaultSrc = this.img.dataset.carouselSrc;
    this.mediaSizes = null;

    this._collectMediaSizes();

    var keys = Object.keys(this.mediaQueries).sort();
    var k = void 0;

    for (var i = 0; i < keys.length; i++) {
      k = keys[i];

      if (window.matchMedia(k).matches) {
        this.src = this.mediaQueries[k];
      }
    }

    if (!this.src) {
      this.src = this.img.dataset.carouselSrc;
    }

    this.img.style.display = 'none';
  };

  Carousel.Item.prototype.changeMedia = function (size) {
    var src = this.mediaQueries[size];
    this.src = src || this.defaultSrc;

    if (this.isLoaded) {
      this.load();
    }
  };

  Carousel.Item.prototype._collectMediaSizes = function () {
    var m = void 0,
        sizes = [],
        sizesrc = {};

    for (var a in this.img.dataset) {
      m = a.match(/Mq-(\d+)$/);

      if (m) {
        this.hasMediaQueries = true;
        m = parseInt(m[1]);
        sizes.push(m);
        sizesrc[m] = this.img.dataset[a];
      }
    }

    var slen = sizes.length;

    if (slen) {
      var _a = void 0,
          str = void 0;
      sizes.sort();

      for (var i = 0; i < slen; i++) {
        _a = sizes[i];
        str = '(min-width: ' + (_a + 1) + 'px)';

        this.mediaQueries[str] = sizesrc[_a];
        h.addMediaQuery(str);
      }

      this.mediaSizes = sizes;
    }
  };

  Carousel.Item.prototype.load = function () {
    this._setSrc(this.src);
  };

  Carousel.Item.prototype._setSrc = function (src) {
    var _this5 = this;

    this.img.setAttribute('src', src);
    this.img.onload = function () {
      _this5.element.style.backgroundImage = 'url(' + src + ')';
      _this5.isLoaded = true;
    };
  };

  Carousel.Indicator = function (owner, index) {
    var _ = this;
    this.index = index;
    this.owner = owner;
    this.btn = h.mkel('a', { class: 'carousel-indicator' });
    this.btn.appendChild(h.mkel('span', { class: 'carousel-indicator-inner' }));
    this.btn.addEventListener('click', function () {
      _.owner.goto(_.index);
    }, true);
  };

  Carousel.Indicator.prototype.activate = function () {
    this.btn.classList.add('carousel-indicator-active');
  };

  Carousel.Indicator.prototype.deActivate = function () {
    this.btn.classList.remove('carousel-indicator-active');
  };

  window.addEventListener('DOMContentLoaded', function () {
    var cs = h.getByClass(document, 'carousel');

    if (cs.length) {
      h.each(cs, function (el) {
        new Carousel(el);
      });
    }
  });
})(window, document, window.navigator);