'use strict';

/*
  Author: Pontus Ã–stlund <https://profiles.google.com/poppanator>
*/
// jshint esversion: 6

(function (window, document, navigator) {
  'use strict';

  var werror = window.console.log;

  var isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;

  // werror('Is touch: ', isTouch);

  // Helper methods
  var h = function () {
    return {
      getByClass: function getByClass(el, cls, one) {
        var e = el.getElementsByClassName(cls);

        if (one && e.length) {
          return e[0];
        }

        return e.length && e || undefined;
      },

      getByTag: function getByTag(el, tag, one) {
        var e = el.getElementsByTagName(tag);

        if (one) {
          if (e && e.length) {
            return e[0];
          }
        }

        return e;
      },

      mkel: function mkel(tag, attr) {
        var e = document.createElement(tag);

        if (attr) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = Object.keys(attr)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var k = _step.value;

              e.setAttribute(k, attr[k]);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }

        return e;
      }
    };
  }();

  if (isTouch) {
    h.getByTag(document, 'html', true).classList.add('carousel-istouch');
  }

  var Carousel = function Carousel(el) {
    this.config = {
      delay: 8000,
      transition: 'slide'
    };

    this.element = el;
    this.useIndicators = el.dataset.carouselIndicators !== undefined;
    this.indicators = [];
    this.slider = h.getByClass(el, 'carousel-slider', true);
    this.items = [];
    this.ivalId = null;
    this.currPos = 0;

    // werror('Use indicators: ', this.useIndicators);

    var items = h.getByClass(this.slider, 'carousel-item');

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = items[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var i = _step2.value;

        this.items.push(new Carousel.Item(i));
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    if (el.dataset.carouselDelay) {
      this.config.delay = parseInt(el.dataset.carouselDelay, 10);
    }

    if (el.dataset.carouselTransition) {
      this.config.transition = el.dataset.carouselTransition;
    }

    if (this.items.length) {
      this.items[0].load();
    }

    if (this.items.length > 1) {
      this.items[1].load();
      this._makeIndicators();
    }

    this.play();
  };

  Carousel.Item = function (el) {
    this.mediaQueries = {};
    this.img = h.getByTag(el, 'img', true);
    this.element = el;
    this.isLoaded = false;
    this.collectMediaSizes();
    this.src = null;

    var keys = Object.keys(this.mediaQueries).sort();
    var k = void 0;

    for (var i = 0; i < keys.length; i++) {
      k = keys[i];

      if (window.matchMedia(k).matches) {
        this.src = this.mediaQueries[k];
        break;
      }
    }

    if (!this.src) {
      this.src = this.img.dataset.carouselSrc;
    }

    this.img.style.display = 'none';
  };

  Carousel.Item.prototype.collectMediaSizes = function () {
    var m = void 0;

    for (var a in this.img.dataset) {
      m = a.match(/Mq-(\d+)$/);

      if (m) {
        this.mediaQueries['(max-width: ' + m[1] + 'px)'] = this.img.dataset[a];
      }
    }
  };

  Carousel.Item.prototype.load = function () {
    var my = this;

    this.img.setAttribute('src', this.src);
    this.img.onload = function (e) {
      my.element.style.backgroundImage = 'url(' + my.src + ')';
      my.isLoaded = true;
    };
  };

  Carousel.prototype.play = function () {
    if (this.ivalId) {
      clearTimeout(this.ivalId);
    }

    var my = this;

    this.ivalId = setTimeout(function () {
      my.next();
      my.play();
    }, this.config.delay);
  };

  Carousel.prototype.next = function () {
    this.currPos += 1;

    if (this.currPos >= this.items.length) {
      this.currPos = 0;
    } else {
      this._loadIfNecessary(this.currPos + 1);
    }

    this.goto(this.currPos);
  };

  Carousel.prototype.goto = function (pos) {
    // werror('gotot: ', pos);
    if (pos < 0 || pos >= this.items.length) {
      return;
    }

    clearTimeout(this.ivalId);

    this._loadIfNecessary(pos);
    this.setIndicator(pos);
    this.slider.dataset.carouselPos = pos;
    this.currPos = pos;
    this.play();
  };

  Carousel.prototype._loadIfNecessary = function (pos) {
    if (pos >= 0 && pos < this.items.length) {
      if (!this.items[pos].isLoaded) {
        this.items[pos].load();
      }
    }
  };

  Carousel.prototype._makeIndicators = function () {
    var _this = this;

    if (!this.useIndicators || this.items.length < 2) {
      return;
    }

    var ind = h.getByClass(this.element, 'carousel-indicators', true);
    var inds = [];

    if (!ind) {
      ind = h.mkel('div', { class: 'carousel-indicators' });
    }

    this.items.forEach(function (el) {
      var i = new Carousel.Indicator(_this, inds.length);
      ind.appendChild(i.btn);
      inds.push(i);
    });

    inds[0].activate();

    this.element.appendChild(ind);
    this.indicators = inds;
  };

  Carousel.prototype.setIndicator = function (index) {
    if (!this.useIndicators || this.items.length < 2) {
      return;
    }

    if (index === undefined) {
      index = this.currPos;
    }

    this.currPos = index;

    this.indicators.forEach(function (ind) {
      ind.deActivate();
    });

    this.indicators[index].activate();
  };

  Carousel.Indicator = function (owner, index) {
    var _ = this;
    this.index = index;
    this.owner = owner;
    this.btn = h.mkel('a', { class: 'carousel-indicator' });
    this.btn.appendChild(h.mkel('span', { class: 'carousel-indicator-inner' }));
    this.btn.addEventListener('click', function (e) {
      _.owner.goto(_.index);
    }, true);
  };

  Carousel.Indicator.prototype.activate = function () {
    this.btn.classList.add('carousel-indicator-active');
  };

  Carousel.Indicator.prototype.deActivate = function () {
    this.btn.classList.remove('carousel-indicator-active');
  };

  window.addEventListener('DOMContentLoaded', function (e) {
    var cs = h.getByClass(document, 'carousel');

    if (cs.length) {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = cs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var el = _step3.value;

          new Carousel(el);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  });
})(window, document, window.navigator);